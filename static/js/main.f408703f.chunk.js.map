{"version":3,"sources":["redux/const/const.js","redux/actions/actionsContacts.js","Component/TodoList/ContactForm/ContactForm.js","Component/TodoList/Filter/Filter.js","Component/TodoList/ContactList/Item/Item.js","Component/TodoList/ContactList/ContactList.js","redux/selector/selector.js","Component/TodoList/TodoList.js","Component/App.js","redux/reduce/reduceContacts.js","redux/store.js","index.js"],"names":["ADD_CONTACT","REMOVE_CONTACT","FILTER_VALUE","FILTER_ARR","REMOVE_FILTER_ARR","NOTIFY","ADD_LOCAL_SOR","addContat","createAction","deleteContact","setIsNotify","filterValue","filterArr","removeFilterArr","addLocalStor","mapDispatchToProps","connect","state","items","contacts","isNotify","useState","name","number","id","objForm","setObjForm","inputHandler","target","value","prev","uuidv4","className","onSubmit","e","preventDefault","some","el","setTimeout","console","log","type","onChange","filter","Item","removeContact","onClick","arr","filterItems","TransitionGroup","component","map","CSSTransition","timeout","classNames","TodoList","useSelector","notify","dispatch","useDispatch","useEffect","prevContact","localStorage","getItem","res","JSON","parse","setItem","stringify","in","appear","unmountOnExit","length","App","reduceContacts","createReducer","payload","contact","toLowerCase","includes","store","configureStore","reducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f408703f.chunk.js","sourcesContent":["export const ADD_CONTACT = \"contact/ADD_CONTACT\";\nexport const REMOVE_CONTACT = \"contact/REMOVE_CONTACT\";\nexport const FILTER_VALUE = \"contact/FILTER_VALUE\";\nexport const FILTER_ARR = 'contact/FILTER_ARR';\nexport const REMOVE_FILTER_ARR = 'contact/REMOVE_FILTER_ARR';\nexport const NOTIFY = 'contact/NOTIFY';\n\nexport const ADD_LOCAL_SOR = \"contact/ADD_LOCAL_SOR\";","import { createAction } from '@reduxjs/toolkit';\nimport { ADD_CONTACT, REMOVE_CONTACT, FILTER_VALUE, FILTER_ARR, REMOVE_FILTER_ARR, NOTIFY, ADD_LOCAL_SOR } from './../const/const'\n\n\nexport const addContat = createAction(ADD_CONTACT);// добавить\nexport const deleteContact = createAction(REMOVE_CONTACT);// удалить\nexport const setIsNotify = createAction(NOTIFY);// алерт на задвоение\nexport const filterValue = createAction(FILTER_VALUE);// добавить фильтр\nexport const filterArr = createAction(FILTER_ARR);// массив фильтров\n\nexport const removeFilterArr = createAction(REMOVE_FILTER_ARR);\n\nexport const addLocalStor = createAction(ADD_LOCAL_SOR)","import React, { useState } from 'react';\n// import { useSelector, useDispatch } from 'react-redux';\n// import PropTypes from \"prop-types\";\nimport './ContactForm.css'\nimport { v4 as uuidv4 } from 'uuid';\nimport { addContat, setIsNotify } from './../../../redux/actions/actionsContacts';\nimport { connect } from 'react-redux';\n\nfunction ContactForm({ addContat, items, isNotify, setIsNotify }) {\n    const [objForm, setObjForm] = useState({ name: '', number: '', id: '' });\n\n    const inputHandler = ({ target }) => {\n        if (isNotify) {\n            setIsNotify(false)\n        };\n        const { value, name } = target;\n        setObjForm(prev => ({ ...prev, [name]: value, id: uuidv4() }));\n    };\n\n    const onHandelSubmit = (e) => {\n        e.preventDefault();\n        if (items.some((el) => el.name === objForm.name)) {\n            setIsNotify(true);\n            setTimeout(function () {\n                console.log(\"hellow\");\n                setIsNotify(false)\n            }, 3000);\n        } else {\n            addContat(objForm);\n        }\n\n        setObjForm({ name: '', number: '', id: uuidv4() });\n    };\n\n    // const contacts = useSelector(state => state.contacts.items);\n    // const dispatch = useDispatch();\n\n\n    // const inputHandler = ({ target }) => {\n    //     if (isNotifi) {\n    //         setIsNotify(false)\n    //     };\n    //     const { value, name } = target;\n    //     setObjForm(prev => ({ ...prev, [name]: value }));\n    // };\n\n    // const onHandelSubmit = (e) => {\n    //     e.preventDefault();\n    //     if (contacts.every((contact) => !contact.name.includes(name))) {\n    //         dispatch(addContact(...objForm, uuidv4()));\n    //     } else {\n    //         setIsNotify(true);\n    //         setTimeout(function () {\n    //             if (isNotifi) {\n    //                 setIsNotify(false)\n    //             };\n    //         }, 3000);\n    //     }\n\n    //     setObjForm({ name: '', number: '' });\n    // };\n\n    return (\n        <>\n            <form className=\"form\" onSubmit={onHandelSubmit}>\n                <p className=\"form-text\">Name</p>\n                <input className=\"input-form\"\n                    type=\"text\"\n                    name=\"name\"\n                    value={objForm.name}\n                    onChange={inputHandler}\n                />\n                <p className=\"form-text\">Number</p>\n                <input className=\"input-form\"\n                    type=\"tel\"\n                    name=\"number\"\n                    value={objForm.number}\n                    onChange={inputHandler}\n                />\n                <button className=\"contact-form-btn\" type='submit'>Add contact</button>\n            </form>\n        </>\n    );\n};\n\nconst mapStateToProps = state => ({ items: state.contacts.items, isNotify: state.contacts.isNotify });\nconst mapDispatchToProps = { addContat, setIsNotify };\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n\n\n\n","import React from 'react';\n// import PropTypes from \"prop-types\";\nimport { filterValue, filterArr, removeFilterArr } from './../../../redux/actions/actionsContacts';\nimport { connect } from 'react-redux'\n\nconst Filter = ({ filter, filterValue, filterArr, removeFilterArr }) => {\n    const inputHandlerFilter = ({ target: { value } }) => {\n        filterValue(value);\n        filterArr(value);\n        if (value === '') {\n            removeFilterArr();\n        }\n    };\n    return (\n        <>\n            <form>\n                <p className=\"form__text\">Find contact by name</p>\n                <input className=\"input__form\"\n                    type=\"text\"\n                    name=\"filter\"\n                    value={filter}\n                    onChange={inputHandlerFilter}\n                />\n            </form>\n\n        </>\n    );\n};\n\nconst mapStateToProps = (state) => ({\n    filter: state.contacts.filter\n})\n\nconst mapDispatchToProps = {\n    filterValue,\n    filterArr,\n    removeFilterArr,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import React from \"react\";\n// import { useDispatch } from \"react-redux\";\n// import actions from \"../../../../redux/actions/actionsContacts\";\nimport PropTypes from \"prop-types\";\nimport './Item.css'\n\n\nconst Item = ({ id, name, number, removeContact }) => {\n    return (\n        <li className=\"contact-list-item\">\n            <p className=\"contact-list-item-text\">\n                {name}: {number}\n            </p>\n            <button\n                className=\"contact-list-item-btn\"\n                type=\"button\"\n                onClick={() => removeContact(id)}\n            >\n                <p className=\"contact-list-item-btn-text\">x</p>\n            </button>\n        </li>\n\n    );\n};\n\nexport default Item;\n\n\nItem.propTypes = {\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n}","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { deleteContact, removeFilterArr } from './../../../redux/actions/actionsContacts';\nimport Item from './Item/Item';\n// import PropTypes from \"prop-types\";\nimport { CSSTransition, TransitionGroup, } from \"react-transition-group\"\nimport './ContactList.css'\n\nexport function ContactList({ arr, deleteContact, removeFilterArr }) {\n\n    const removeContact = (id) => {\n        deleteContact(id);\n        removeFilterArr();\n    };\n\n    return (\n        <TransitionGroup component='ul' className='list-item'>\n            {arr.map(el => (<CSSTransition key={el.id} timeout={250} classNames='items'><Item {...el} removeContact={removeContact} /></CSSTransition>))}\n        </TransitionGroup>\n\n    );\n};\n\nconst mapStateToProps = state => ({\n    arr: state.contacts.filterItems\n        ? state.contacts.filterItems\n        : state.contacts.items,\n});\n\nconst mapDispatchToProps = { deleteContact, removeFilterArr };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n\n","\r\nexport const contacts = state => state.contacts;\r\nexport const items = state => contacts(state).items;\r\nexport const notify = state => contacts(state).isNotify;","import React, { useEffect } from \"react\"\nimport { useSelector, useDispatch } from 'react-redux';\nimport { CSSTransition } from \"react-transition-group\"\nimport ContactForm from \"./ContactForm/ContactForm\"\nimport Filter from \"./Filter/Filter\"\nimport ContactList from \"./ContactList/ContactList\"\nimport \"./TodoList.css\"\n// import { addContact, removeContact, changeFilter } from './../../redux/actions/actionsContacts'\nimport { addLocalStor } from './../../redux/actions/actionsContacts';\nimport { items, notify } from \"../../redux/selector/selector\";\n\n// const state = {\n// \tcontacts: [\n// \t\t// { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\n// \t\t// { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\n// \t\t// { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\n// \t\t// { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" },\n// \t],\n// \tfilter: \"\",\n// }\n\nfunction TodoList() {\n\tconst contacts = useSelector(state => items(state));\n\tconst isNotify = useSelector(state => notify(state));\n\tconst dispatch = useDispatch();\n\n\tuseEffect(() => {\n\t\tconst prevContact = localStorage.getItem(\"contacts\")\n\t\tconst res = JSON.parse(prevContact)\n\t\tdispatch(addLocalStor(res))\n\t}, [dispatch])\n\n\tuseEffect(() => {\n\t\tlocalStorage.setItem(\"contacts\", JSON.stringify(contacts))\n\t}, [contacts])\n\n\t// const [obj, setObj] = useState({ ...state })\n\t// const addContact = async (user) => {\n\t// \tif (obj.contacts.some((el) => el.name === user.name)) {\n\t// \t\treversNotifi()\n\t// \t\t// alert(`${user.name} уже записанно, введите другое имя!`)\n\t// \t} else {\n\t// \t\tsetObj((prev) => ({ ...prev, contacts: [...prev.contacts, { id: uuidv4(), ...user }] }))\n\t// \t\tlocalStorage.setItem(\"contacts\", JSON.stringify(obj.contacts))\n\t// \t}\n\t// }\n\t// const delContact = (id) => {\n\t// \tconst contacts = obj.contacts.filter((el) => el.id !== id)\n\t// \tsetObj((prev) => ({ ...prev, contacts }))\n\t// }\n\t// const inputFilter = ({ target }) => {\n\t// \tconst { value, name } = target\n\t// \tsetObj((prev) => ({ ...prev, [name]: value }))\n\t// }\n\n\n\t// const vissbleTask = () => {\n\t// \treturn obj.contacts.filter((el) => el.name.toLowerCase().includes(obj.filter.toLowerCase()))\n\t// }\n\t// const reversNotifi = () => {\n\t// \tsetIsNotifi(true)\n\t// \tsetTimeout(function () {\n\t// \t\tif (isNotifi) {\n\t// \t\t\tsetIsNotifi(false)\n\t// \t\t};\n\t// \t}, 2000);\n\t// }\n\t// const filterTask = vissbleTask()\n\n\treturn (\n\t\t<>\n\n\t\t\t<CSSTransition in={true} appear={true} timeout={500} classNames=\"title\" unmountOnExit>\n\t\t\t\t<h1 className='titles'>Phonebook</h1>\n\t\t\t</CSSTransition>\n\t\t\t<CSSTransition in={isNotify} timeout={500} classNames=\"alert\" unmountOnExit>\n\t\t\t\t<h2 className='alert'>Contact is already exists!</h2>\n\t\t\t</CSSTransition>\n\t\t\t<ContactForm />  {/*  addContact={addContact} setIsNotifi={setIsNotifi} isNotifi={isNotifi}    */}\n\n\t\t\t<CSSTransition in={contacts.length > 1} timeout={250} classNames='filter' unmountOnExit>\n\t\t\t\t<Filter />\n\t\t\t</CSSTransition>\n\n\t\t\t<ContactList /> {/* obj={obj} filter={filterTask} deleteContact={delContact}  */}\n\n\n\n\t\t</>\n\t)\n}\n\n\n\n\n\nexport default TodoList;\n","import React from \"react\"\nimport TodoList from \"./TodoList/TodoList\"\n\nconst App = () => {\n\treturn (\n\t\t<>\n\t\t\t<TodoList />\n\t\t</>\n\t)\n}\n\nexport default App\n","// import { combineReducers } from 'redux';\nimport { createReducer } from \"@reduxjs/toolkit\";\nimport { ADD_CONTACT, REMOVE_CONTACT, FILTER_VALUE, FILTER_ARR, REMOVE_FILTER_ARR, NOTIFY, ADD_LOCAL_SOR } from './../const/const'\n\nconst initialState = {\n    contacts: {\n        items: [],\n        filter: '',\n    },\n};\n\nexport const reduceContacts = createReducer(initialState, {\n    [ADD_CONTACT]: (state, { payload }) => {\n        console.log(payload);\n        return {\n            ...state,\n            contacts: {\n                ...state.contacts,\n                items: [...state.contacts.items, payload],\n            },\n        }\n    },\n    [REMOVE_CONTACT]: (state, { payload }) => ({\n        ...state,\n        contacts: {\n            ...state.contacts,\n            items: state.contacts.items.filter(contact => contact.id !== payload),\n        },\n    }),\n    [FILTER_VALUE]: (state, { payload }) => ({\n        ...state,\n        contacts: {\n            ...state.contacts,\n            filter: payload,\n        },\n    }),\n    [FILTER_ARR]: (state, { payload }) => ({\n        ...state,\n        contacts: {\n            ...state.contacts,\n            filterItems: state.contacts.items.filter(el =>\n                el.name.toLowerCase().includes(state.contacts.filter.toLowerCase()),\n            ),\n        },\n    }),\n    [REMOVE_FILTER_ARR]: (state, { payload }) => ({\n        ...state,\n        contacts: {\n            ...state.contacts,\n            filterItems: \"\",\n        },\n    }),\n    [NOTIFY]: (state, { payload = false }) => ({\n        ...state,\n        contacts: {\n            ...state.contacts,\n            isNotify: payload,\n        },\n    }),\n    [ADD_LOCAL_SOR]: (state, { payload }) => ({\n        ...state,\n        contacts: {\n            ...state.contacts,\n            items: [...payload],\n        },\n    })\n})\n\n    // const state = {\n    //     contacts: [\n    //         // { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\n    //         // { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\n    //         // { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\n    //         // { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" },\n    //     ],\n    //     filter: \"\",\n    // }\n\n    // const [obj, setObj] = useState({ ...state })\n    // const addContact = async (user) => {\n    //     if (obj.contacts.some((el) => el.name === user.name)) {\n    //         reversNotifi()\n    //         // alert(`${user.name} уже записанно, введите другое имя!`)\n    //     } else {\n    //         setObj((prev) => ({ ...prev, contacts: [...prev.contacts, { id: uuidv4(), ...user }] }))\n    //         localStorage.setItem(\"contacts\", JSON.stringify(obj.contacts))\n    //     }\n    // }\n    // const delContact = (id) => {\n    //     const contacts = obj.contacts.filter((el) => el.id !== id)\n    //     setObj((prev) => ({ ...prev, contacts }))\n    // }\n    // const inputFilter = ({ target }) => {\n    //     const { value, name } = target\n    //     setObj((prev) => ({ ...prev, [name]: value }))\n    // }","import { reduceContacts } from './reduce/reduceContacts';\nimport { configureStore } from '@reduxjs/toolkit';\nconst store = configureStore({\n    reducer: reduceContacts,\n});\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport App from './Component/App';\nimport store from './redux/store'\nimport './index.css';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}